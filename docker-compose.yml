version: '3.8'

services:
  db:
    image: postgres:15
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: rag_saas
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d rag_saas" ]
      interval: 5s
      timeout: 10s
      retries: 20
  
  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"

  flask_app:
    build:
      context: ./Flask
      dockerfile: Dockerfile
    container_name: flask-backend
    restart: always
    env_file:
      - ./Flask/.env
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - uploaded_documents:/flask_app/uploadedDocuments
    
  celery_worker:
    build:
      context: ./batch
      dockerfile: Dockerfile
    container_name: celery-worker
    depends_on:
      redis:
        condition: service_started
      db:
        condition: service_healthy
    volumes:
        - uploaded_documents:/flask_app/uploadedDocuments
    
  celery_worker_ai:
    build:
      context: ./batchAI
      dockerfile: Dockerfile
    container_name: celery-worker-AI
    depends_on:
      redis:
        condition: service_started
      ollama:
        condition: service_started
      db:
        condition: service_healthy
    volumes:
        - uploaded_documents:/flask_app/uploadedDocuments
        - chroma_db:/chroma_db

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    restart: always
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        ollama serve & 
        sleep 10 && 
        ollama pull llama3:8b && 
        tail -f /dev/null

  # flask-ai:
  #   build:
  #     context: ./FlaskAI
  #     dockerfile: Dockerfile.Flask
  #   ports:
  #     - "5000:5000"
  #   depends_on:
  #     - redis
  #   environment:
  #     FLASK_APP: "app.py"
  #     FLASK_ENV: "development"
  #   volumes:
  #     - chroma_db:/chroma_db

  # celery-worker-messages:
  #   build:
  #     context: ./FlaskAI
  #     dockerfile: Dockerfile.Celery
  #   depends_on:
  #     - flask-ai
  #   volumes:
  #     - chroma_db:/chroma_db

volumes:
  uploaded_documents:
  ollama_data:
  chroma_db: